// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: odom.proto

#ifndef PROTOBUF_odom_2eproto__INCLUDED
#define PROTOBUF_odom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "quaternion.pb.h"
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)

namespace odom_msgs {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_odom_2eproto();
void protobuf_AssignDesc_odom_2eproto();
void protobuf_ShutdownFile_odom_2eproto();

class odom;

// ===================================================================

class odom : public ::google::protobuf::Message {
 public:
  odom();
  virtual ~odom();

  odom(const odom& from);

  inline odom& operator=(const odom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const odom& default_instance();

  void Swap(odom* other);

  // implements Message ----------------------------------------------

  odom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const odom& from);
  void MergeFrom(const odom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 usec = 1;
  inline bool has_usec() const;
  inline void clear_usec();
  static const int kUsecFieldNumber = 1;
  inline ::google::protobuf::int32 usec() const;
  inline void set_usec(::google::protobuf::int32 value);

  // required .gazebo.msgs.Vector3d position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::gazebo::msgs::Vector3d& position() const;
  inline ::gazebo::msgs::Vector3d* mutable_position();
  inline ::gazebo::msgs::Vector3d* release_position();
  inline void set_allocated_position(::gazebo::msgs::Vector3d* position);

  // required .gazebo.msgs.Quaternion orientation = 3;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  inline const ::gazebo::msgs::Quaternion& orientation() const;
  inline ::gazebo::msgs::Quaternion* mutable_orientation();
  inline ::gazebo::msgs::Quaternion* release_orientation();
  inline void set_allocated_orientation(::gazebo::msgs::Quaternion* orientation);

  // required .gazebo.msgs.Vector3d linear_velocity = 4;
  inline bool has_linear_velocity() const;
  inline void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 4;
  inline const ::gazebo::msgs::Vector3d& linear_velocity() const;
  inline ::gazebo::msgs::Vector3d* mutable_linear_velocity();
  inline ::gazebo::msgs::Vector3d* release_linear_velocity();
  inline void set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity);

  // required .gazebo.msgs.Vector3d angular_velocity = 5;
  inline bool has_angular_velocity() const;
  inline void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 5;
  inline const ::gazebo::msgs::Vector3d& angular_velocity() const;
  inline ::gazebo::msgs::Vector3d* mutable_angular_velocity();
  inline ::gazebo::msgs::Vector3d* release_angular_velocity();
  inline void set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity);

  // repeated float pose_covariance = 6 [packed = true];
  inline int pose_covariance_size() const;
  inline void clear_pose_covariance();
  static const int kPoseCovarianceFieldNumber = 6;
  inline float pose_covariance(int index) const;
  inline void set_pose_covariance(int index, float value);
  inline void add_pose_covariance(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      pose_covariance() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_pose_covariance();

  // repeated float twist_covariance = 7 [packed = true];
  inline int twist_covariance_size() const;
  inline void clear_twist_covariance();
  static const int kTwistCovarianceFieldNumber = 7;
  inline float twist_covariance(int index) const;
  inline void set_twist_covariance(int index, float value);
  inline void add_twist_covariance(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      twist_covariance() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_twist_covariance();

  // @@protoc_insertion_point(class_scope:odom_msgs.msgs.odom)
 private:
  inline void set_has_usec();
  inline void clear_has_usec();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_linear_velocity();
  inline void clear_has_linear_velocity();
  inline void set_has_angular_velocity();
  inline void clear_has_angular_velocity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gazebo::msgs::Vector3d* position_;
  ::gazebo::msgs::Quaternion* orientation_;
  ::gazebo::msgs::Vector3d* linear_velocity_;
  ::gazebo::msgs::Vector3d* angular_velocity_;
  ::google::protobuf::RepeatedField< float > pose_covariance_;
  mutable int _pose_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > twist_covariance_;
  mutable int _twist_covariance_cached_byte_size_;
  ::google::protobuf::int32 usec_;
  friend void  protobuf_AddDesc_odom_2eproto();
  friend void protobuf_AssignDesc_odom_2eproto();
  friend void protobuf_ShutdownFile_odom_2eproto();

  void InitAsDefaultInstance();
  static odom* default_instance_;
};
// ===================================================================


// ===================================================================

// odom

// required int32 usec = 1;
inline bool odom::has_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void odom::set_has_usec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void odom::clear_has_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void odom::clear_usec() {
  usec_ = 0;
  clear_has_usec();
}
inline ::google::protobuf::int32 odom::usec() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.usec)
  return usec_;
}
inline void odom::set_usec(::google::protobuf::int32 value) {
  set_has_usec();
  usec_ = value;
  // @@protoc_insertion_point(field_set:odom_msgs.msgs.odom.usec)
}

// required .gazebo.msgs.Vector3d position = 2;
inline bool odom::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void odom::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void odom::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void odom::clear_position() {
  if (position_ != NULL) position_->::gazebo::msgs::Vector3d::Clear();
  clear_has_position();
}
inline const ::gazebo::msgs::Vector3d& odom::position() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::gazebo::msgs::Vector3d* odom::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::gazebo::msgs::Vector3d;
  // @@protoc_insertion_point(field_mutable:odom_msgs.msgs.odom.position)
  return position_;
}
inline ::gazebo::msgs::Vector3d* odom::release_position() {
  clear_has_position();
  ::gazebo::msgs::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline void odom::set_allocated_position(::gazebo::msgs::Vector3d* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:odom_msgs.msgs.odom.position)
}

// required .gazebo.msgs.Quaternion orientation = 3;
inline bool odom::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void odom::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void odom::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void odom::clear_orientation() {
  if (orientation_ != NULL) orientation_->::gazebo::msgs::Quaternion::Clear();
  clear_has_orientation();
}
inline const ::gazebo::msgs::Quaternion& odom::orientation() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::gazebo::msgs::Quaternion* odom::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) orientation_ = new ::gazebo::msgs::Quaternion;
  // @@protoc_insertion_point(field_mutable:odom_msgs.msgs.odom.orientation)
  return orientation_;
}
inline ::gazebo::msgs::Quaternion* odom::release_orientation() {
  clear_has_orientation();
  ::gazebo::msgs::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void odom::set_allocated_orientation(::gazebo::msgs::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:odom_msgs.msgs.odom.orientation)
}

// required .gazebo.msgs.Vector3d linear_velocity = 4;
inline bool odom::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void odom::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void odom::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void odom::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->::gazebo::msgs::Vector3d::Clear();
  clear_has_linear_velocity();
}
inline const ::gazebo::msgs::Vector3d& odom::linear_velocity() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.linear_velocity)
  return linear_velocity_ != NULL ? *linear_velocity_ : *default_instance_->linear_velocity_;
}
inline ::gazebo::msgs::Vector3d* odom::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) linear_velocity_ = new ::gazebo::msgs::Vector3d;
  // @@protoc_insertion_point(field_mutable:odom_msgs.msgs.odom.linear_velocity)
  return linear_velocity_;
}
inline ::gazebo::msgs::Vector3d* odom::release_linear_velocity() {
  clear_has_linear_velocity();
  ::gazebo::msgs::Vector3d* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
inline void odom::set_allocated_linear_velocity(::gazebo::msgs::Vector3d* linear_velocity) {
  delete linear_velocity_;
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:odom_msgs.msgs.odom.linear_velocity)
}

// required .gazebo.msgs.Vector3d angular_velocity = 5;
inline bool odom::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void odom::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void odom::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void odom::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::gazebo::msgs::Vector3d::Clear();
  clear_has_angular_velocity();
}
inline const ::gazebo::msgs::Vector3d& odom::angular_velocity() const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_ : *default_instance_->angular_velocity_;
}
inline ::gazebo::msgs::Vector3d* odom::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) angular_velocity_ = new ::gazebo::msgs::Vector3d;
  // @@protoc_insertion_point(field_mutable:odom_msgs.msgs.odom.angular_velocity)
  return angular_velocity_;
}
inline ::gazebo::msgs::Vector3d* odom::release_angular_velocity() {
  clear_has_angular_velocity();
  ::gazebo::msgs::Vector3d* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
inline void odom::set_allocated_angular_velocity(::gazebo::msgs::Vector3d* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:odom_msgs.msgs.odom.angular_velocity)
}

// repeated float pose_covariance = 6 [packed = true];
inline int odom::pose_covariance_size() const {
  return pose_covariance_.size();
}
inline void odom::clear_pose_covariance() {
  pose_covariance_.Clear();
}
inline float odom::pose_covariance(int index) const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.pose_covariance)
  return pose_covariance_.Get(index);
}
inline void odom::set_pose_covariance(int index, float value) {
  pose_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:odom_msgs.msgs.odom.pose_covariance)
}
inline void odom::add_pose_covariance(float value) {
  pose_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:odom_msgs.msgs.odom.pose_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
odom::pose_covariance() const {
  // @@protoc_insertion_point(field_list:odom_msgs.msgs.odom.pose_covariance)
  return pose_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
odom::mutable_pose_covariance() {
  // @@protoc_insertion_point(field_mutable_list:odom_msgs.msgs.odom.pose_covariance)
  return &pose_covariance_;
}

// repeated float twist_covariance = 7 [packed = true];
inline int odom::twist_covariance_size() const {
  return twist_covariance_.size();
}
inline void odom::clear_twist_covariance() {
  twist_covariance_.Clear();
}
inline float odom::twist_covariance(int index) const {
  // @@protoc_insertion_point(field_get:odom_msgs.msgs.odom.twist_covariance)
  return twist_covariance_.Get(index);
}
inline void odom::set_twist_covariance(int index, float value) {
  twist_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:odom_msgs.msgs.odom.twist_covariance)
}
inline void odom::add_twist_covariance(float value) {
  twist_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:odom_msgs.msgs.odom.twist_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
odom::twist_covariance() const {
  // @@protoc_insertion_point(field_list:odom_msgs.msgs.odom.twist_covariance)
  return twist_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
odom::mutable_twist_covariance() {
  // @@protoc_insertion_point(field_mutable_list:odom_msgs.msgs.odom.twist_covariance)
  return &twist_covariance_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace odom_msgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_odom_2eproto__INCLUDED
